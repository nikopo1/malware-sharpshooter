#ifndef _GRAPHBUILDER_H_
#define _GRAPHBUILDER_H_

#include <semaphore.h>

#include <vector>

#include "graph.h"
#include "scdecoder.h"

#define CHILD_SEM_NAME	"/child_semaphore"

class GraphBuilder {

	/*
	 * The system calls' xml based decoder.
	 */
	SCDecoder dec;

	/*
	 * Semaphore to block child process in order for parent to
	 * configure the child's pid in SCID.
	 */
	sem_t* child_sem;

	/*
	 * If the GraphBuilder should attempt to aggregate vertices.
	 */
	bool aggregate;

	/*
	 * Configures the SCID kernel module to track the system calls
	 * contained in the syscalls vector.
	 */
	int set_monitored_syscalls(std::vector<int> syscalls);

	/*
	 * Reads the trace from fd - file descriptor to the driver.
	 */
	int read_trace(int fd, syscall_t** trace);

	/*
	 * Starts the program from pathfile and returns the new process'
	 * pid.
	 */
	pid_t start_child(const char* pathfile);

	/*
	 * Gets the trace for the program given via pathfile.
	 */
	int get_trace(const char* pathfile, syscall_t** trace);

public:
	GraphBuilder(const char* pathfile, bool aggregate);
	~GraphBuilder(void);

	/*
	 * Returns the dependence graph for program given as pathfile.
	 */
	Graph* build_graph(const char* pathfile);
};

#endif
