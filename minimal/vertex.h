#ifndef _VERTEX_H_
#define _VERTEX_H_
#include "../include/param.h"
#include <iostream>

class Vertex {
	static int crt;
public:
	/* for node indexing purposes */
	unsigned int index;
	/* syscall information */
	syscall_t info;
	/* graph exploration */
	bool visited;

	Vertex(syscall_t _info);
	/*
	 * Copy constructor.
	 */
	Vertex(const Vertex &other);
	virtual ~Vertex();

	/*
	 * Setter for visited.
	 */
	void set_visited(bool _visited);

	/*
	 * Returns true if the node has already been visited.
	 */
	bool is_visited(void);

	/*
	 * is there a dependency between _this_ syscall and the @other
	 * syscall?
	 * */
	bool depends_on(Vertex* other);

	/*
	 * If this vertex is a close system call and other is an open
	 * syscall, then close this vertex.
	 */
	bool closes_vertex(Vertex* other);

	bool operator==(const Vertex& other) const;
	bool operator<(const Vertex& other) const;
	Vertex& operator=(const Vertex& other);

	friend std::ostream& operator<<(std::ostream& stream, const Vertex& vertex);
};
#endif
