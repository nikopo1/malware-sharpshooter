#include "graph.h"
#include <algorithm>

Graph::Graph() {
}

Graph::~Graph() {
}

void Graph::addVertex(Vertex &node) {
	vertexs.push_back(node);
}

bool Graph::hasVertex(Vertex &node) {
	return find(vertexs.begin(), vertexs.end(), node) != vertexs.end();
}

void Graph::addEdge(Vertex &from, Vertex &to) {
	edges.push_back(std::pair<Vertex, Vertex>(from, to));
}

bool Graph::hasEdge(Vertex &from, Vertex &to) {
	return find(edges.begin(), edges.end(),
			std::make_pair(from, to)) != edges.end();
}

bool Graph::hasEdge(std::pair<Vertex, Vertex> &edge) {
	return find(edges.begin(), edges.end(), edge) != edges.end();
}

std::vector< Vertex > Graph::getVertexs() {
	return vertexs;
}

std::vector< std::pair<Vertex, Vertex> > Graph::getEdges() {
	return edges;
}
