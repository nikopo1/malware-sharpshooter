#ifndef _GRAPH_H_
#define _GRAPH_H_

#include "vertex.h"

#include <vector>
#include <iostream>

#define VERTEX_NONE	-1

class Graph {
	std::vector< Vertex* > vertexs;
	std::vector< std::vector<Vertex*> > edges;
public:
	/* constructors and destructors */
	Graph();
	Graph(syscall_t* trace, int length);
	Graph(const Graph& other, std::vector<int> vertex_subset);

	virtual ~Graph();
	/* general usage methods */
	void addVertex(Vertex *node);
	bool hasVertex(Vertex *node);

	void addEdge(Vertex *from, Vertex *to);
	bool hasEdge(Vertex *from, Vertex *to);

	std::vector< Vertex* > getVertexs();
	std::vector< std::pair<Vertex*,Vertex*> > getEdges() const;
	std::vector< Vertex* > getNeighbours(Vertex *vertex);

	friend std::ostream& operator<<(std::ostream& stream, const Graph& graph);
	
	/* algorithm methods */
	void generateVertexes(syscall_t* trace, int length);
	int generateDepEdges(void);
	std::vector<int> maximalCommonEdgeSet(Graph& other);
	Graph* subgraphComplement(std::vector<int>& vertex_subset);
	void minimalTraversal(void);
private:
	Graph& operator=(const Graph& other);
};
#endif
