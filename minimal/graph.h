#ifndef _GRAPH_H_
#define _GRAPH_H_

#include "vertex.h"

#include <vector>
#include <iostream>

class Graph {
	std::vector< Vertex > vertexs;
	std::vector< std::pair<Vertex,Vertex> > edges;
public:
	/* constructors and destructors */
	Graph();
	Graph(syscall_t* trace, int length);
	virtual ~Graph();
	/* general usage methods */
	void addVertex(const Vertex &node);
	bool hasVertex(const Vertex &node);

	void addEdge(const Vertex &from, const Vertex &to);
	bool hasEdge(const Vertex &from, const Vertex &to);
	bool hasEdge(const std::pair<Vertex,Vertex> &edge);

	std::vector< Vertex > getVertexs();
	std::vector< std::pair<Vertex,Vertex> > getEdges();

	friend std::ostream& operator<<(std::ostream& stream, const Graph& graph);
	
	/* algorithm methods */
	int genDependencyEdges(void);
	std::vector< std::pair<Vertex,Vertex> > maximalCommonEdgeSet(const Graph& other);

};
#endif
