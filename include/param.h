#ifndef _PARAM_H_
#define _PARAM_H_

#include "scid.h"
#include <string.h> /* memset */
#include <asm/unistd_32.h>

#define MAX_NUM_PARAM	8

/* possible type values for struct param */
#define TYPE_NONE	0
#define TYPE_INT	1
#define TYPE_FD		2
#define TYPE_PCHAR	3
#define TYPE_PVOID	4
#define TYPE_USHORT	5
#define TYPE_SIZE_T	6
#define TYPE_VOID	7

/* xml attribute name for parameter type */
#define XML_TYPE_ATTR			"type"

/* xml string values for parameter type */
#define STR_TYPE_NONE			"none"
#define STR_TYPE_INT			"int"
#define STR_TYPE_FD			"fd"
#define STR_TYPE_PCHAR			"pchar"
#define STR_TYPE_PVOID			"pvoid"
#define STR_TYPE_USHORT			"ushort"
#define STR_TYPE_SIZE_T			"size_t"
#define STR_TYPE_VOID			"void"

/* possible parameter direction values for struct param */
#define DIR_NONE	0x00
#define DIR_IN		0x01
#define DIR_OUT		0x02
#define DIR_INOUT	0x03

/* xml attribute name for parameter direction */
#define XML_DIR_ATTR			"dir"

/* xml string values for parameter direction */
#define STR_DIR_NONE			"none" /* not used in xml */
#define STR_DIR_IN			"in"
#define STR_DIR_OUT			"out"
#define STR_DIR_INOUT			"inout"

/* param data structure to describe a syscall's parameters */
typedef struct param {
	unsigned char type; /* fd, int, char*, void*, unsigned short */
	unsigned char dir; /* 1 in, 2 out, 3 inout */
	long value;
} param_t;

typedef struct _syscall_t {
	int syscall_no;        /* the system call number */
	param_t param[MAX_NUM_PARAM]; /* last element is the return value */
} syscall_t;

#endif
